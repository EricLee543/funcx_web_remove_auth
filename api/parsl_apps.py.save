
import parsl
import subprocess

from parsl.app.app import python_app
from parsl.configs.htex_local import config

parsl.load(config)

dfk = parsl.dfk()
ex = dfk.executors['htex_local']

config = Config(
    executors=[
        HighThroughputExecutor(
            label="htex_local",
            cores_per_worker=1,
            provider=LocalProvider(
                channel=LocalChannel(),
                init_blocks=1,
                max_blocks=1,
                min_blocks=1,
            ),
        )
    ],
    strategy=None
)


@python_app
def parsl_test(command):
    return 'done'


@python_app
def execute_task(command):
    import subprocess
    for x in range(0, 2):
        try:
            process = subprocess.Popen(command.split(' '), stdout=subprocess.PIPE)
            out, err = process.communicate()
            ret_val = out.decode('utf-8').strip()
            if ret_val:
                return ret_val
        except Exception as e:
            print("Unexpected Exception: {}".format(str(e)))
            pass
    return 'done'


def run_command(command):
    import subprocess
    for x in range(0, 2):
        try:
            process = subprocess.Popen(command.split(' '), stdout=subprocess.PIPE)
            out, err = process.communicate()
            ret_val = out.decode('utf-8').strip()
            if ret_val:
                return ret_val
        except Exception as e:
            print("Unexpected Exception: {}".format(str(e)))
            pass
    return 'done'


def yadu_executor(command):
    print("Made it to executor caller.")
    fut_result = ex.submit(run_command, command)
    print(fut_result)
    print("Made it to after exec")
    return fut_result
